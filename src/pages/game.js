import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import React, {useState, useEffect, useRef} from 'react'
import styles from '@/styles/game.module.css'
import bg from '../../public/frame.png'
import { PulseLoader } from 'react-spinners'
// import Data from '@/components/Data'

const ticks = [1820,1850,1880,1910,1940,1970,2000]
// const scoreTotal= []
// const usedIndexes = []

export default function Game() {
  const [data, setData] = useState(null);
  const [index, setIndex] = useState(0)
  const [guessMade, setGuessMade] = useState(false);
  const [valueSlider, setValueSlider] = useState();
  const [currentRound, setCurrentRound] = useState(1);
  const [yearsOf, setYearsOf] = useState(null)
  const [scoreThisRound, setScoreThisRound] = useState(null)
  const [scoreTotal, setScoreTotal] = useState([])
  const [usedIndexes, setUsedIndexes] = useState([])
  const [expandImage, setExpandImage] = useState(false)
  const sliderRef = useRef(null)
  let whileCounter = 0

  function resetConst(){
    const scoreTotal= []
    const usedIndexes = []
  }


//Get the data from the JSON file
  useEffect(() => {
    async function getData() {
      const res = await fetch('/data.json');
      const json = await res.json();
      {json.ImageTesting && setIndex(Math.floor(Math.random()*json.ImageTesting.length))} //Make first image random
      setData(json.ImageTesting);
      
    }
    getData();
    
  }, []);

  function randIndex (){
    if (data){
      let newIndex = Math.floor(Math.random()*data.length)
      while(usedIndexes.includes(newIndex)){
        whileCounter += 1
        newIndex = Math.floor(Math.random()*data.length)
        if (whileCounter > 100){
          alert('WHile loop popping of')
          break
        }
      }
      setIndex(newIndex)
    };
  }
  
  useEffect(() => {
    setValueSlider(sliderRef.current.value)
  }, [sliderRef])

  function makeGuess (){
    setYearsOf(Math.abs(valueSlider - data[index].year))//fires of the first useEffect
    usedIndexes.push(index)
  }
  //updates the scoreThisRound but makes sure it does not update on initial load
  useEffect(()=>{
    let score = 0
    const formula = (1000/50)*(50-yearsOf)
    {formula <0 ?(score=0):score=formula}
    {yearsOf !== null && setScoreThisRound(score);}
    {yearsOf !== null && scoreTotal.push([index, score]);}
    // {yearsOf !== null && setScoreTotal([...scoreTotal,[index,score]]);}
    {console.log('inni listi i useeff',scoreTotal)}
  },[yearsOf])
  //updates the guessMade but makes sure to not do it onload
  useEffect(()=>{
    {scoreThisRound !== null && setGuessMade(true)}
  },[scoreThisRound])

  function nextRound (){
    randIndex()
    setCurrentRound(currentRound + 1)
    setGuessMade(false)
    console.log('score this round', scoreThisRound)
    console.log('score lista',scoreTotal)
    console.log('used i ',usedIndexes)
    
  }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
        <div className={styles.roundCounter}>Round: {currentRound}/5</div>
        <div className={styles.imageContainer}>
          {data ?(<img className={styles.image} src={data[index].url} onClick={()=>setExpandImage(true)} style={{borderImage: `url(${bg.src}) 93 92 87 92 stretch stretch`}}/>):<PulseLoader color="maroon" />}
        </div>
        <div className={styles.sliderContainer}>
          <h3 className={styles.value}>{valueSlider}</h3>
          <input className={styles.slider} type="range" min="1816" max="2023" id='yearSlider' ref={sliderRef} onChange={e => setValueSlider(e.target.value)}/>
            <div className={styles.ticksContainer}>
                {ticks.map((value) => (
              <div
                className={styles.tickMark}
                style={{ left: `${(value-1816)/2.07}%`}}
                key={value}
              >
                <div className={styles.line} />
                <p>{value}</p>
              </div>))}
          </div>  
        </div>
        {guessMade && data && (<div className={styles.correctAnswer}>The correct answer was: 
          <br />
          <h3>{data[index].year}</h3> 
          <br /> 
          You were of by:
          <br />
          <h3>{yearsOf} years</h3>
          <br />
          Score: <div style={yearsOf <= 5 ? {color: '#2d5443'}: yearsOf > 5 && yearsOf <=15 ? {color: '#F8C02E'}:{color: '#7a0a0e'} }>{scoreThisRound}</div> 
          </div>)}
          { guessMade ?
          (currentRound === 5 ?
            (<Link href={{pathname: '/overview', query: scoreTotal}}><button  className={styles.guessButton}>Overview</button></Link>)
            :
            (<button className={styles.guessButton} onClick={() => nextRound()}>Next Round</button>))
          :
          (<button className={styles.guessButton} onClick={() => makeGuess()} >Make Guess</button>)}
          {expandImage ? (<div className={styles.overlay}><img className={styles.overlayImg} onClick={()=>setExpandImage(false)} src={data[index].url} alt="" /></div>):('')}
        
      </main>
    </>
  )
}


